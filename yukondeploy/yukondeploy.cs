using System;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Reflection;
using System.IO;
using System.Diagnostics;
using System.Collections;
using System.Collections.Generic;
using DM.Build.Yukon.Attributes.Service;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;


namespace DM.Build.Yukon.Tasks {
  public class DeployAssembly : Task {
    internal string asmName = ""; //name of the assembly to deploy
    internal string asmPath = ""; //path to the assembly
    internal string pdbPath = ""; //full name of the pdb file
    internal string connString = ""; //connection string to the db
    internal int permLevel = 0; //permission levels:0=SAFE;1=EXTERNAL_ACCESS;2=UNSAFE
    internal string perm = ""; //this is the permission set keyword used in the T-SQL syntax 
    internal bool deployDebug = true; //flag wich indicates whether to deploy debug symbols
    internal bool alterAsm = false; //flag which indicates whether to run ALTER instead of CREATE ASSEMBLY
    internal string scriptFile = ""; //indicates the path and name to script the operations
    internal bool toScript = false; //indicates whether to create a script or not. If false toConnect has to be true.
    internal bool toConnect = false; //indicates whether to connect or just create a script. If false, toScripts has to be true/
    internal bool toDropTable = false; //indicates whether to drop the whole table or just columns
    internal int castType = 0; //type to cast the UDT to when creating a temp column, values:0=varchar(max);1=varbinary(max)
    internal bool unChecked = false; //during alter assmebly indicates whether to set UNCHECKED DATA or not
    internal bool toUpload = false; //indicates whether to upload source files.
    internal string sourceExt = ""; //file extension for source files
    internal string sourcePath = ""; //Path to source files
    internal bool useDMDeployAttr = true; //flag which indicates whether we are using the deployattributes.dll or not
    internal ServerVersion servVersion = ServerVersion.S2K5;
    internal StreamWriter sw;
    internal SqlConnection conn = null;
    internal SqlTransaction tx = null;
    internal Assembly asm = null; //instance of the assembly we're working with

    string[] msKeyTokens = new string[] {
      "b03f5f7f11d50a3a",
      "31bf3856ad364e35",
      "89845dcd8080cc91",
      "71e9bce111e9429c",
      "b77a5c561934e089"};
    
    
    string[] gacDlls2k5 = new string[] { "Microsoft.Visualbasic.dll", 
      "Mscorlib.dll", 
      "System.Data.dll", 
      "System.dll", 
      "System.Xml.dll", 
      "Microsoft.Visualc.dll", 
      "Custommarshallers.dll", 
      "System.Security.dll", 
      "System.Web.Services.dll", 
      "System.Data.SqlXml.dll", 
      "System.Transactions.dll", 
      "System.Data.OracleClient.dll",
      "System.Configuration.dll",
      "System.Deployment.dll"};
    string[] gacDlls2k8 = new string[] { "Microsoft.Visualbasic.dll", 
      "Mscorlib.dll", 
      "System.Data.dll", 
      "System.dll", 
      "System.Xml.dll", 
      "Microsoft.Visualc.dll", 
      "Custommarshallers.dll", 
      "System.Security.dll", 
      "System.Web.Services.dll", 
      "System.Data.SqlXml.dll", 
      "System.Transactions.dll", 
      "System.Data.OracleClient.dll",
      "System.Core.dll",
      "System.Configuration.dll",
      "System.Deployment.dll",
      "System.Xml.Linq.dll",
      "Microsoft.SqlServer.Types.dll"};
    string[] dlls = null;
    string dirPath = null; //path to the directory where the assembly exists

    internal bool isScriptingTool = false; //flag which says if we're coming from the script-tool and  not SQLCLRProject

    public DeployAssembly()
    {

    }

    public DeployAssembly(string _name, string _path, int _version)
    {
      AssemblyName = _name;
      AssemblyPath = _path;
      SqlServerVersion = _version;

    }
    
    /// <summary>
    /// Indicates whether to create an Assembly or Alter an existing. [Optional]
    /// </summary>
    /// <value>boolean</value>
    public bool AlterAssembly {
      get { return alterAsm; }
      set { alterAsm = value; }
    }

    /// <summary>
    /// The name of the assembly without file-extension. Required.
    /// </summary>
    public string AssemblyName {
      get { return asmName; }
      set { asmName = value; }
    }

    /// <summary>
    /// The full path to the assembly.Required.
    /// </summary>
    public string AssemblyPath {
      get { return asmPath; }
      set { 
        asmPath = value;
        asm = Assembly.LoadFile(asmPath);
        dirPath = Path.GetDirectoryName(asmPath);
        dlls = Directory.GetFiles(dirPath, "*.dll");
        
      
      }
    }

    /// <summary>
    /// The permission level to create the assembly with. [Optional - default = SAFE]
    /// </summary>
    ///<value>Integer entered as string: 0=SAFE, 1=EXTERNAL_ACCESS, 2=UNSAFE</value>
    public int PermissionSet {
      get { return permLevel; }
      set { permLevel = value; }
    }

    /// <summary>
    /// Indicates whether to deploy debug symbols. Default is true. [Optional]
    /// </summary>
    /// <value>boolean</value>
    public bool DeployDebugSymbols
    {
      get { return deployDebug; }
      set { deployDebug = value; }
    }

    /// <summary>
    /// The full path to the pdb files. [Optional]
    /// </summary>
    public string DebugSymbolsPath {
      get { return pdbPath; }
      set { pdbPath = value;}
    }

    /// <summary>
    /// Connection string to the database. Optional if ScriptFilePath exists
    /// [Optional]
    /// </summary>
    public string ConnectionString {
      get { return connString; }
      set {
        if (value != null && value != string.Empty) {
          connString = value;
        }
      }
    }

    /// <summary>
    /// The name including full path to a script file that is 
    /// to be created containing the T-SQL syntax for deploying the assembly.
    /// The name of the file is a generic name and is changed to name_assembly.ext by the task. 
    /// Optional if ConnectionString exists.
    /// [Optional]
    /// </summary>
    public string ScriptFilePath {
      get { return scriptFile; }
      set {
        if (value != string.Empty && value != null) {
          string fullFilePath = value;

          scriptFile = Utility.AddToFileName(fullFilePath, "assembly");
          toScript = true;
        }
      }
    }

    /// <summary>
    /// Indicates whether to drop a whole table dependent on a UDT/UDF or just the dependent column(s). Default is to drop just the columns. [Optional]
    /// </summary>
    /// <value>boolean</value>
    public bool IsTableDrop {
      get { return toDropTable; }
      set { toDropTable = value; }
    }

    /// <summary>
    /// Integer which indicates what datatype to cast a UDT to when re-deploying
    /// </summary>
    /// <value>Integer with values: 0=varchar(max), 1=varbinary(max)</value>
    public int TypeToCastUDTTo
    {
      get { return castType; }
      set { castType = value; }
    }

    /// <summary>
    /// Used during ALTER ASSEMBLY to say whether functions/types etc needs to be dropped. If true, they are not dropped [Optional]
    /// </summary>
    /// 
    /// <value>boolean</value>
    public bool UncheckedData {
      get { return unChecked; }
      set { unChecked = value; }
    }

    /// <summary>
    /// Boolean flag which indicates whether to connect to the database or not
    /// </summary>
    /// <value></value>
    public bool ToConnect {
      get { return toConnect; }
      set { toConnect = value; }
    }

    /// <summary>
    /// Boolean flag which indicates whether to upload source files or not
    /// </summary>
    /// <value></value>
    public bool UploadSource {
      get { return toUpload; }
      set { toUpload = value; }
    }

    
    /// <summary>
    /// Path to source files. [Optional]
    /// </summary>
    public string SourcePath {
      get { return sourcePath; }
      set {
        sourcePath = value;
      }
    }

    /// <summary>
    /// The file extension for source files. [Optional]
    /// </summary>
    public string SourceFileExtension {
      get { return sourceExt; }
      set {
        sourceExt = value;
      }
    }

    /// <summary>
    /// Indicates whether we are using the deployattributes.dll assembly or not. If we (default) we will deploy deployattributes.dll to the db. [Optional]
    /// </summary>
    /// <value>boolean</value>
    public bool UsingDMDeployAttributes
    {
      get { return useDMDeployAttr; }
      set { useDMDeployAttr = value; }
    }

    /// <summary>
    /// What version of SQL Server we target. SQL 2005 is default. [Optional]
    /// </summary>
    /// <value>SqlServerVersion</value>
    public int SqlServerVersion
    {
      get { return (int)servVersion; }
      set { servVersion =  (ServerVersion)value; }
    }

    /// <summary>
    /// Validates the input. makes sure the necessary info exists.
    /// </summary>
    void Validate() {
      bool val = true;
      StringBuilder valError = new StringBuilder("Can not deploy due to following:\n");

      if (asmName == "") {
        val = false;
        valError.Append("* AssemblyName is missing.\n");
      }

      if (asmPath == "") {
        val = false;
        valError.Append("* AssemblyPath is missing.\n");
      }

      if (toConnect) {
        if (ConnectionString == null || ConnectionString == string.Empty) {
          val = false;
          valError.Append("* ConnectionString is missing.\n");
        }
      }

      if (toScript) {
        if (scriptFile == null || scriptFile == string.Empty) {
          val = false;
          valError.Append("* ScriptFilePath is missing.\n");
        }
      }

      if (!toConnect && toUpload) {
        val = false;
        valError.Append("* ToConnect is false, but UploadSource is true.\nIn order to upload source files, ToConnect has to be true.\n");
        
      }

      if (toUpload) {
        if (sourceExt == null || sourceExt == string.Empty) {
          val = false;
          valError.Append("* SourceFileExtension is missing.\n");
        }

        if (sourcePath == null || sourcePath == string.Empty) {
          val = false;
          valError.Append("* SourcePath is missing.\n");
        }


      }

      if (!val) {
        throw new ApplicationException(valError.ToString());
      }
    }

    public override bool Execute() {
      //Debugger.Launch();
      try {
        //check that we have the necessary info
        Validate();

        if (toConnect) {
          //open the connection
          conn = new SqlConnection(connString);
          conn.Open();

          //start the tx
          tx = conn.BeginTransaction();

        }

        //create the file
        if (toScript) {
          string deploymentString = "--Deployment script for assembly: " + asmName;
          if (alterAsm)
            deploymentString = "--Deployment script for alter assembly: " + asmName;

          sw = Utility.OpenFile(scriptFile, !alterAsm);
          Utility.WriteToFile(sw, deploymentString, false, false);
          Utility.WriteToFile(sw, "--Autogenerated at: " + DateTime.Now, false, true);
        }

        //if this is alter, do not drop dependents
        if (!alterAsm) {
          DropAssembly d = new DropAssembly(sw, conn, tx, asmName, toDropTable, castType, toScript, this, Assembly.LoadFile(asmPath));
          d.DropAsm(toConnect);
        }

        //if we are using the VS project type, check if deployproperties exist
        if(useDMDeployAttr)
          DeployAttributeDll();
        
        List<DMAssemblyName> asl = DeployAsm();

        if (deployDebug)
          DeploySymbols(asl);

        if (toUpload)
          DeployFiles();

        if (toConnect) {
          Utility.LogMyComment(this, "Comitting Transaction");
          tx.Commit();
        }

        Utility.LogMyComment(this, "Deployment Succeeded!\n");
        return true;
      }
      
      catch (Exception e) {
        Utility.LogMyComment(this, "Error(s) Occured");
        Utility.LogMyComment(this, "Deployment Failed");
        Utility.LogMyErrorFromException(this, e);
        if (toConnect) {
          if (tx != null) {
            Utility.LogMyComment(this, "Rolling Back Transaction");
            if (tx.Connection != null)
              tx.Rollback();
          }
        }


        return false;
      }
      finally {
        if (toConnect) {
          if (conn != null && conn.State != ConnectionState.Closed)
            conn.Close();
        }
        if (toScript && sw != null) {
          sw.Flush();
          sw.Close();
        }
      }
    }

    void DeploySymbols(List<DMAssemblyName> asl) {
      try {

        bool hasSymbols = false;
        StringBuilder sbCmd = new StringBuilder();
        string deployCmd = "";
        string logComment = "No symbol files found";

        //we need to find all symbol files
        string dirName = new FileInfo(DebugSymbolsPath).DirectoryName;
        string[] symbolFiles = Directory.GetFiles(dirName, "*.pdb");
                
        //loop the files
        foreach (string symFile in symbolFiles)
        {

          DMAssemblyName dmasm = asl.Find(delegate(DMAssemblyName dasm)
          {
            string asmFileWithoutExt = null;
            string dbgFileWithoutExt = null;
            asmFileWithoutExt = Path.GetFileNameWithoutExtension(dasm.AssemblyFileName);
            dbgFileWithoutExt = Path.GetFileNameWithoutExtension(symFile);
            return asmFileWithoutExt == dbgFileWithoutExt;
          }
          );
          if (dmasm != null)
          {
            string bin = GetBinary(symFile, true);
            deployCmd = string.Format("ALTER ASSEMBLY [{0}]\nADD FILE FROM {1}\nAS '{2}';\n", dmasm.ShortName, bin, Path.GetFileName(symFile));
            sbCmd.Append(deployCmd);
            deployCmd = "";
            hasSymbols = true;
          }
          
        }
        if (hasSymbols)
        {
          deployCmd = sbCmd.ToString();
          logComment = "About to deploy symbols:\n" + deployCmd + "\n";

          Utility.LogMyComment(this, logComment);

          if (toScript)
          {
            Utility.WriteToFile(sw, "--Alter the assembly to deploy debug symbols", false, false);
            Utility.WriteToFile(sw, deployCmd, true, true);
          }

          if (toConnect)
            Utility.WriteToDb(deployCmd, conn, tx);

        }
        else
        {
          Utility.LogMyComment(this, logComment);
        }
        
      }
      catch (Exception e) {
        Utility.LogMyErrorFromException(this, e);
        throw e;
      }
      finally {
      }
    }

    void DeployFiles() {
      string deployCmd = "";
      try {
        string[] sFiles = Directory.GetFiles(sourcePath, "*." + sourceExt);
        if (sFiles.Length > 0) {
          string logComment = "About to alter the assembly to deploy source files.\n";
          Utility.LogMyComment(this, logComment);
          if (toScript)
            Utility.WriteToFile(sw, "--Alter the assembly to deploy source files", false, false);
          StringBuilder sb = new StringBuilder();
          foreach (string sFile in sFiles) {
            if (sb.Length > 0)
              sb.Remove(0, sb.Length);

            sb.Append(GetBinary(sFile, true));
            deployCmd = string.Format("ALTER ASSEMBLY [{0}]\nADD FILE FROM {1}\nAS '{2};", asmName, sb.ToString(), Path.GetFileName(sFile));
            Utility.LogMyComment(this, deployCmd);
            if (toScript) {
              Utility.WriteToFile(sw, deployCmd, true, true);
            }
            if (toConnect)
              Utility.WriteToDb(deployCmd, conn, tx);
          }
        }

      }
      catch (Exception e) {
        Utility.LogMyErrorFromException(this, e);
        throw e;
      }
      finally {
      }
    }

    void DropFiles() {
      try {
        string deployCmd = string.Format("ALTER ASSEMBLY [{0}]\nDROP FILE ALL;", asmName);
        string logComment = "About to drop files:\n" + deployCmd + "\n";

        Utility.LogMyComment(this, logComment);

        if (toScript) {
          Utility.WriteToFile(sw, "--Dropping files in order to Alter the assembly", false, false);
          Utility.WriteToFile(sw, deployCmd, true, true);
        }

        if (toConnect)
          Utility.WriteToDb(deployCmd, conn, tx);

       
      }
      catch (Exception e) {
        Utility.LogMyErrorFromException(this, e);
        throw e;
      }
      finally {
      }
    }

    void LoopAsm(ref List<DMAssemblyName> asmList, string asmPath, string asmName, string asmFullPath, DMAssemblyName dmAsmName)
    {
      //Debugger.Launch();
      Assembly a = null;
      if (asmFullPath != null && dmAsmName == null)
      {
        a = Assembly.ReflectionOnlyLoadFrom(asmFullPath);
        
      }
      else if (asmFullPath == null && dmAsmName == null)
      {
        asmFullPath = Path.Combine(asmPath, asmName + ".dll");
        a = Assembly.ReflectionOnlyLoadFrom(asmFullPath);
      }
      else if (dmAsmName != null && dmAsmName.IsLocal)
      {
        a = Assembly.ReflectionOnlyLoadFrom(dmAsmName.AssemblyFileName);
      }

      else if (dmAsmName != null && !dmAsmName.IsLocal)
      {
        a = Assembly.ReflectionOnlyLoad(dmAsmName.AssemblyFullName);
      }
           

      if (a != null)
      {

        foreach (AssemblyName an in a.GetReferencedAssemblies())
        {

          
          if (an.Name != "yukondeploy" && an.Name != "deployattributes")
          {
            DMAssemblyName refAsm = CheckIfAsmBlessed(an.Name, an.FullName);
            if (refAsm != null)
            {
              if (!refAsm.IsLocal)
                refAsm.AssemblyFullName = an.FullName;
                
              if (!asmList.Exists(delegate(DMAssemblyName asmx) 
              {
                return asmx.ShortName == an.Name;
              }
                ))
              {
                asmList.Add(refAsm);
                if(!refAsm.IsMSAssembly)
                  LoopAsm(ref asmList, asmPath, an.Name, refAsm.AssemblyFileName, refAsm);
              }
            }
          }
        }
      }

    }

    
    //this loops through the list of blessed assemblies
    //to see if referenced assemblies are in the blessed list
    //if not add them to the list of referenced assemblies
    DMAssemblyName CheckIfAsmBlessed(string asmName, string asmFullName)
    {
      DMAssemblyName dasm = null;
      //string retString = null;
      bool isGac = false;
      string[] gacDlls = gacDlls2k5;
      //in Katmai we have more dlls allowed being loaded from the GAC
      if (servVersion == ServerVersion.S2K8)
      {
        gacDlls = gacDlls2k8;
      }
      foreach (string gacAsm in gacDlls)
      {
        if (gacAsm.ToUpper().IndexOf(asmName.ToUpper()) != -1)
        {
          isGac = true;
          break;
        }
      }
      if (!isGac)
      {
        dasm = new DMAssemblyName();
        dasm.ShortName = asmName;
        dasm.AssemblyFullName = asmFullName;
        dasm.IsLocal = false;
        //check against the local dll's
        foreach (string locAsm in dlls)
        {
          if (locAsm.ToUpper().IndexOf(asmName.ToUpper()) != -1)
          {
            dasm.AssemblyFileName = locAsm;
            dasm.IsLocal = true;
            break;
          }
        }

        //check if this is a MS System assembly
        if (!dasm.IsLocal)
        {
          foreach (string pkt in msKeyTokens)
          {
            if(dasm.AssemblyFullName.Contains(pkt))
            {
              dasm.IsMSAssembly = true;
              break;
            }
          }
        }

      }
      return dasm;
    }
    /// <summary>
    /// Gets a list of referenced assemblies
    /// </summary>
    /// <param name="asmPath">path to the directory where the assemly resides</param>
    /// <param name="asmName">the name under which the assembly will be cataloged</param>
    /// <param name="asmFullName">full path to the dll (including filename and extension)</param>
    /// <returns>Returns a List of DMAssemblyName instances</returns>
    public List<DMAssemblyName> GetReferencedAssemblies()
    {
      //Debugger.Launch();
      List<DMAssemblyName> refList = new List<DMAssemblyName>();
      LoopAsm(ref refList, dirPath, AssemblyName, AssemblyPath, null);
      return refList;
    }

    string GetBinary(string asmPath, bool isFirst) {
      FileStream fs = new FileStream(asmPath, FileMode.Open, FileAccess.Read);

      byte[] bits = new byte[(int)fs.Length];
      fs.Read(bits, 0, (int)fs.Length);
      fs.Close();

      StringBuilder sb = new StringBuilder();
      if (!isFirst)
        sb.Append(",");
      sb.Append("0x");
      foreach (byte b in bits) {
        sb.Append(b.ToString("X2"));
      }

      return sb.ToString();

    }
    
    

    //this method deploys the yukondeployattribute dll
    void DeployAttributeDll() {
      
      try {
        string deployCmd = "if(not exists (select * from sys.assemblies where name = 'deployattributes'))\n  begin\n  create assembly deployattributes\nfrom nend";         
        string logCmd = "--Creating the deploy attribute assembly";
        string createText = "About to create deploy attributes assembly\n";

        string logComment = createText + deployCmd + "\n";
        Utility.LogMyComment(this, logComment);

        if (toScript) {
          Utility.WriteToFile(sw, logCmd, false, false);
          Utility.WriteToFile(sw, deployCmd, true, true);
        }

        if (toConnect) {
          Utility.WriteToDb(deployCmd, conn,tx);
        }
               
      }
      catch (Exception e) {
        Utility.LogMyErrorFromException(this, e);
        throw e;
      }

        
      finally {
      }
        
    
    }

    List<DMAssemblyName> DeployAsm()
    {
      bool isNonLocal = false;
      string asmWarning;
      List<DMAssemblyName> asl = null;
      try {
        //Debugger.Launch();
        //deploy the assembly
        //get the perm set

        switch (PermissionSet) {
          case 0:
            perm = "SAFE";
            break;

          case 1:
            perm = "EXTERNAL_ACCESS";
            break;

          case 2:
            perm = "UNSAFE";
            break;

          default:
            perm = "SAFE";
            break;
        }

        string createCmd = "CREATE ASSEMBLY ";
        string logCmd = "--Creating the assembly";

        if (alterAsm) {
          createCmd = "ALTER ASSEMBLY ";
          logCmd = "--Altering the assembly";
        }

        //get the binary rep of the main assembly
        StringBuilder sb = new StringBuilder();
        sb.Append(GetBinary(asmPath, true));

        //ArrayList asl = new ArrayList();
        asl = new List<DMAssemblyName>();
        
        
        //if not alter, get the binary representation of the dependent assemblies
        if (!alterAsm)
        {
          //get the dependent assemblies
          asl = GetReferencedAssemblies();
          StringBuilder nonBlessed = new StringBuilder();
          nonBlessed.Append("***WARNING***\nFollowing assemblies - which are referenced by the main assembly - are not in the applicaton directory, and not in the 'blessed' list either:\n");
          

          string depName = null;
          foreach (DMAssemblyName an in asl)
          {
            if (an.IsLocal)
            {
              depName = an.AssemblyFileName;
              sb.Append(GetBinary(depName, false));
            }
            else
            {
              isNonLocal = true;
              nonBlessed.Append("  * " + an.ShortName + "\n");
            }

          }

          if (isNonLocal)
          {
            nonBlessed.Append("The above assemblies have to be catalogued in the database before this deployment can succeed.\n***END WARNING***\n");
            asmWarning = nonBlessed.ToString();
            Utility.LogMyComment(this, asmWarning);

          }

        }
        
        
        string deployCmd = string.Format("{0} [{1}]\nFROM {2}\nWITH PERMISSION_SET = {3}", createCmd, asmName, sb.ToString(), perm);

        string createText = "About to create assembly '" + asmName + "':\n";

        if (alterAsm) {
          //Debugger.Launch();
          //we need to drop debug symbols 
          //before being able to alter an assembly
          if (deployDebug)
            DropFiles();

          createText = "About to alter assembly '" + asmName + "':\n";
          if (unChecked) {
            deployCmd = string.Format("{0},\n{1}", deployCmd, "UNCHECKED DATA");
          }
        }

        //add the main assembly to the list (will be used for debug symbols)
        DMAssemblyName dmasm = new DMAssemblyName(asmPath, asmName, true);
        asl.Add(dmasm);
        string logComment = createText + deployCmd + "\n";
        Utility.LogMyComment(this, logComment);

        if (toScript) {
          Utility.WriteToFile(sw, logCmd, false, false);
          Utility.WriteToFile(sw, deployCmd, true, true);
        }

        if (toConnect) {
          //Debugger.Launch();
          Utility.WriteToDb(deployCmd, conn, tx);
        }
        return asl;
               
      }
      catch (Exception e) {
        
        if(toConnect && alterAsm) {
          if(e.Message.Contains("ALTER ASSEMBLY has marked data as unchecked")) {
            Utility.LogMyComment(this, e.Message);
          }
          else {
            Utility.LogMyErrorFromException(this, e);
            throw e;
          }

        }
        else {
          Utility.LogMyErrorFromException(this, e);
          throw e;
        }
        return asl;
      }
      finally {
      }
    }
  }
  /// <summary>
  /// A class containing assembly information
  /// </summary>
  public class DMAssemblyName
  {
    
    public string AssemblyFileName { get; set; }
    public string ShortName { get; set; }
    public bool IsLocal { get; set; }
    public string AssemblyFullName { get; set; }
    public bool IsMSAssembly { get; set; }
    public DMAssemblyName(){}
    
    public DMAssemblyName(string asmFileName, string shortName) : this(asmFileName, shortName, false){}
    
    public DMAssemblyName(string asmFileName, string shortName, bool _isLocal)
    {
      AssemblyFileName = asmFileName;
      ShortName = shortName;
      IsLocal = _isLocal;
      
    }
  }
}
